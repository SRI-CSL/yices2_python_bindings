import unittest
from .. import yices
from ctypes import *
#import gmpy2

class TestTerms(unittest.TestCase):

  def setUp(self):
    yices.init()

  def tearDown(self):
    #yices.exit()
    pass

  def test_terms(self):
    true_ = yices.true()
    false_ = yices.false()
    bool_t = yices.bool_type()
    int_t = yices.int_type()
    unint_t = yices.new_uninterpreted_type()
    self.assertNotEqual(true_, false_)
    const1 = yices.constant(unint_t, 0)
    const2 = yices.new_uninterpreted_term(unint_t)
    bconst1 = yices.new_uninterpreted_term(bool_t)
    iconst1 = yices.new_uninterpreted_term(int_t)
    var1 = yices.new_variable(unint_t)
    bvar1 = yices.new_variable(bool_t)
    ivar1 = yices.new_variable(int_t)
    ivar2 = yices.new_variable(int_t)
    ivar3 = yices.new_variable(int_t)
    ivar4 = yices.new_variable(int_t)
    zero = yices.zero()
    int1 = yices.int32(13)
    int2 = yices.int32(17)
    self.assertEqual(zero, yices.int32(0))
    fun1_t = yices.function_type1(int_t, bool_t)
    fun1 = yices.new_variable(fun1_t)
    app1 = yices.application1(fun1, int1)
    fun2_t = yices.function_type2(int_t, int_t, bool_t)
    fun2 = yices.new_variable(fun2_t)
    app2 = yices.application2(fun2, int1, int1)
    fun3_t = yices.function_type3(int_t, int_t, int_t, bool_t)
    fun3 = yices.new_variable(fun3_t)
    app3 = yices.application3(fun3, int1, int1, int1)
    tup3_t = yices.tuple_type3(bool_t, int_t, unint_t)
    tupconst1 = yices.new_variable(tup3_t)
    # Note that "(yices.type_t * 4)(int_t, int_t, int_t, int_t)" also works
    TypeArray4 = yices.type_t * 4
    ta4 = TypeArray4(int_t, int_t, int_t, int_t)
    TermArray4 = yices.term_t * 4
    int4 = TermArray4(int1, int2, iconst1, ivar1)
    int4_2 = TermArray4(ivar1, ivar2, ivar3, ivar4)
    fun4_t = yices.function_type(4, ta4, bool_t)
    fun4 = yices.new_variable(fun4_t)
    app4 = yices.application(fun4, 4, int4)
    ite1 = yices.ite(bconst1, int1, int2)
    eq1 = yices.eq(int1, int1)
    neq1 = yices.neq(int1, int1)
    not1 = yices.not_(false_)
    TermArray5 = yices.term_t * 5
    bool5 = TermArray5(false_, eq1, neq1, app4, false_)
    or1 = yices.or_(5, bool5)
    and1 = yices.and_(5, bool5)
    xor1 = yices.xor(5, bool5)
    or2 = yices.or2(or1, and1)
    and2 = yices.and2(or1, and1)
    xor2 = yices.xor2(or1, and1)
    or3 = yices.or3(or1, and1, or2)
    and3 = yices.and3(or1, and1, and2)
    xor3 = yices.xor3(or1, and1, xor2)
    iff1 = yices.iff(and1, or1)
    implies1 = yices.implies(and1, or1)
    tup1 = yices.tuple(4, int4)
    pair1 = yices.pair(eq1, xor2)
    triple1 = yices.triple(ite1, fun4, or3)
    select1 = yices.select(2, tup1)
    select2 = yices.select(2, tupconst1)
    tupup1 = yices.tuple_update(tup1, 2, int2)
    update1 = yices.update1(fun1, int1, false_)
    update2 = yices.update2(fun2, int1, int1, false_)
    update3 = yices.update3(fun3, int1, int1, int1, false_)
    update4 = yices.update(fun4, 4, int4, false_)
    distinct1 = yices.distinct(4, int4)
    var2 = yices.new_variable(unint_t)
    vareq = yices.eq(var1, var2)
    vars2 = (yices.term_t * 2)(var1, var2)
    forall1 = yices.forall(2, vars2, vareq)
    exists1 = yices.exists(2, vars2, vareq)
    lambda1 = yices.lambda_(2, vars2, vareq)
    zero = yices.zero()
    int64_1 = yices.int64(42)
    rat32_1 = yices.rational32(13, 7)
    rat64_1 = yices.rational64(-47, 111)
    gmpz = yices.new_mpz(42)
    mpz1 = yices.mpz(gmpz)
    gmpq = yices.new_mpq(42, 77)
    mpq1 = yices.mpq(gmpq)
    rat1 = yices.parse_rational('-3/117')
    float1 = yices.parse_float('-3.117e-2')
    add1 = yices.add(int1, int1)
    sub1 = yices.sub(int1, zero)
    neg1 = yices.neg(int1)
    self.assertEqual(yices.neg(zero), zero)
    self.assertNotEqual(neg1, int1)
    mul1 = yices.mul(int1, int1)
    square1 = yices.square(int1)
    self.assertEqual(mul1, square1)
    power1 = yices.power(int1, 4)
    sum1 = yices.sum(4, int4)
    product1 = yices.product(4, int4)
    product2 = yices.product(4, int4_2)
    div1 = yices.division(int1, int1)
    idiv1 = yices.idiv(int1, int1)
    imod1 = yices.imod(int1, int1)
    divatom1 = yices.divides_atom(int1, int1)
    intatom1 = yices.is_int_atom(int1)
    abs1 = yices.abs(neg1)
    self.assertEqual(abs1, int1)
    floor1 = yices.floor(rat1)
    ceil1 = yices.ceil(rat1)
    poly32 = yices.poly_int32(4, (c_int32 * 4)(2, 3, 4, 5), int4)
    poly64 = yices.poly_int64(4, (c_int64 * 4)(3, 4, 5, 6), int4)
    polyrat32 = yices.poly_rational32(4, (c_int32 * 4)(2, 3, 4, 5), (c_int32 * 4)(12, 13, 14, 15), int4)
    polyrat64 = yices.poly_rational64(4, (c_int64 * 4)(2, 3, 4, 5), (c_int64 * 4)(12, 13, 14, 15), int4)
    #polympz = yices.poly_mpz(4, (mpz_t * 4)(SOMETHING), int4)
    #polympq = yices.poly_mpq(4, (mpq_t * 4)(SOMETHING), int4)
    areqatom1 = yices.arith_eq_atom(int1, zero)
    arneqatom1 = yices.arith_neq_atom(int1, zero)
    argeqatom1 = yices.arith_geq_atom(int1, zero)
    arleqatom1 = yices.arith_leq_atom(int1, zero)
    argtatom1 = yices.arith_gt_atom(int1, zero)
    arltatom1 = yices.arith_lt_atom(int1, zero)
    areq0atom1 = yices.arith_eq0_atom(int1)
    arneq0atom1 = yices.arith_neq0_atom(int1)
    argeq0atom1 = yices.arith_geq0_atom(int1)
    arleq0atom1 = yices.arith_leq0_atom(int1)
    argt0atom1 = yices.arith_gt0_atom(int1)
    arlt0atom1 = yices.arith_lt0_atom(int1)
    bv_t = yices.bv_type(8)
    bvconstu32_1 = yices.bvconst_uint32(8, 42)
    bvconstu64_1 = yices.bvconst_uint64(8, 42)
    bvconst32_1 = yices.bvconst_int32(8, 42)
    bvconst64_1 = yices.bvconst_int64(8, 42)
    # bvconstmpz_1 = yices.bvconst_mpz(8, )
    bvconstzero_1 = yices.bvconst_zero(16)
    bvconstone_1 = yices.bvconst_one(16)
    bvconstminusone_1 = yices.bvconst_minus_one(32)
    bvconstarray1 = yices.bvconst_from_array(4, (c_int32 * 4)(1, 0, 1, 0))
    bvvar1 = yices.new_variable(bv_t)
    bvvar2 = yices.new_variable(bv_t)
    bvvar3 = yices.new_variable(bv_t)
    bvvar4 = yices.new_variable(bv_t)
    bvbin1 = yices.parse_bvbin('100101')
    bvhex1 = yices.parse_bvhex('f0a1b3')
    bvadd1 = yices.bvadd(bvbin1, bvbin1)
    bvsub1 = yices.bvsub(bvbin1, bvbin1)
    bvneg1 = yices.bvneg(bvbin1)
    bvmul1 = yices.bvmul(bvbin1, bvbin1)
    bvsquare1 = yices.bvsquare(bvbin1)
    bvpower1 = yices.bvpower(bvbin1, 3)
    bvdiv1 = yices.bvdiv(bvbin1, bvbin1)
    bvrem1 = yices.bvrem(bvbin1, bvbin1)
    bvsdiv1 = yices.bvsdiv(bvbin1, bvbin1)
    bvsrem1 = yices.bvsrem(bvbin1, bvbin1)
    bvsmod1 = yices.bvsmod(bvbin1, bvbin1)
    bvnot1 = yices.bvnot(bvbin1)
    bvnand1 = yices.bvnand(bvbin1, bvbin1)
    bvnor1 = yices.bvnor(bvbin1, bvbin1)
    bvxnor1 = yices.bvxnor(bvbin1, bvbin1)
    bvshl1 = yices.bvshl(bvbin1, bvbin1)
    bvlshr1 = yices.bvlshr(bvbin1, bvbin1)
    bvashr1 = yices.bvashr(bvbin1, bvbin1)
    bvand1 = yices.bvand(4, (yices.term_t * 4)(bvbin1, bvbin1, bvbin1, bvbin1))
    bvor1 = yices.bvor(4, (yices.term_t * 4)(bvbin1, bvbin1, bvbin1, bvbin1))
    bvand2_1 = yices.bvand2(bvbin1, bvbin1)
    bvor2_1 = yices.bvor2(bvbin1, bvbin1)
    bvxor2_1 = yices.bvxor2(bvbin1, bvbin1)
    bvand3_1 = yices.bvand3(bvbin1, bvbin1, bvbin1)
    bvor3_1 = yices.bvor3(bvbin1, bvbin1, bvbin1)
    bvxor3_1 = yices.bvxor3(bvbin1, bvbin1, bvbin1)
    bvsum1 = yices.bvsum(4, (yices.term_t * 4)(bvbin1, bvbin1, bvbin1, bvbin1))
    bvsum2 = yices.bvsum(4, (yices.term_t * 4)(bvvar1, bvvar2, bvvar3, bvvar4))
    bvproduct1 = yices.bvproduct(4, (yices.term_t * 4)(bvbin1, bvbin1, bvbin1, bvbin1))
    shleft0_1 = yices.shift_left0(bvbin1, 5)
    shleft1_1 = yices.shift_left1(bvbin1, 4)
    shright0_1 = yices.shift_right0(bvbin1, 3)
    shright1_1 = yices.shift_right1(bvbin1, 2)
    ashright_1 = yices.ashift_right(bvbin1, 1)
    rotleft_1 = yices.rotate_left(bvbin1, 6)
    rotright_1 = yices.rotate_right(bvbin1, 5)
    bvextract1 = yices.bvextract(bvbin1, 2, 4)
    bvconcat2_1 = yices.bvconcat2(bvbin1, bvbin1)
    bvconcat_1 = yices.bvconcat(4, (yices.term_t * 4)(bvbin1, bvbin1, bvbin1, bvbin1))
    bvrepeat1 = yices.bvrepeat(bvbin1, 8)
    signext1 = yices.sign_extend(bvbin1, 3)
    zeroext1 = yices.zero_extend(bvbin1, 4)
    redand1 = yices.redand(bvbin1)
    redor1 = yices.redor(bvbin1)
    redcomp1 = yices.redcomp(bvbin1, bvbin1)
    bvarray1 = yices.bvarray(4, (yices.term_t * 4)(true_, false_, true_, false_))
    bitextract1 = yices.bitextract(bvbin1, 3)
    bveqatom1 = yices.bveq_atom(bvbin1, bvbin1)
    bvneqatom1 = yices.bvneq_atom(bvbin1, bvbin1)
    bvgeatom1 = yices.bvge_atom(bvbin1, bvbin1)
    bvgtatom1 = yices.bvgt_atom(bvbin1, bvbin1)
    bvleatom1 = yices.bvle_atom(bvbin1, bvbin1)
    bvltatom1 = yices.bvlt_atom(bvbin1, bvbin1)
    bvsgeatom1 = yices.bvsge_atom(bvbin1, bvbin1)
    bvsgtatom1 = yices.bvsgt_atom(bvbin1, bvbin1)
    bvsleatom1 = yices.bvsle_atom(bvbin1, bvbin1)
    bvsltatom1 = yices.bvslt_atom(bvbin1, bvbin1)
    ptype1 = yices.parse_type('int')
    self.assertEqual(ptype1, yices.int_type())
    pterm1 = yices.parse_term('42')
    self.assertEqual(pterm1, yices.int32(42))
    subst1 = yices.subst_term(2, (yices.term_t * 2)(yices.new_variable(ptype1),
                                              yices.new_variable(ptype1)),
                              (yices.term_t * 2)(yices.int32(2), yices.int32(3)),
                              yices.int32(42))
    substarr1 = yices.subst_term_array(2, (yices.term_t * 2)(yices.new_variable(ptype1),
                                                       yices.new_variable(ptype1)),
                                       (yices.term_t * 2)(yices.int32(2), yices.int32(3)),
                                       3, (yices.term_t * 3)(yices.int32(2), yices.int32(3), yices.int32(7)))
    settypename1 = yices.set_type_name(ptype1, 'I')
    self.assertEqual(settypename1, 0)
    settermname1 = yices.set_term_name(pterm1, 'answer')
    self.assertEqual(settermname1, 0)
    gettype1 = yices.get_type_by_name('I')
    self.assertEqual(gettype1, ptype1)
    getterm1 = yices.get_term_by_name('answer')
    self.assertEqual(getterm1, pterm1)
    gettypename1 = yices.get_type_name(ptype1)
    self.assertEqual(gettypename1, 'I')
    gettermname1 = yices.get_term_name(pterm1)
    self.assertEqual(gettermname1, 'answer')
    yices.remove_type_name('I')
    yices.remove_term_name('answer')
    yices.clear_type_name(ptype1)
    yices.clear_term_name(pterm1)
    typeofterm1 = yices.type_of_term(pterm1)
    self.assertEqual(typeofterm1, yices.int_type())
    self.assertEqual(yices.term_is_bool(false_), 1)
    self.assertEqual(yices.term_is_bool(pterm1), 0)
    self.assertEqual(yices.term_is_int(false_), 0)
    self.assertEqual(yices.term_is_int(pterm1), 1)
    self.assertEqual(yices.term_is_real(false_), 0)
    self.assertEqual(yices.term_is_real(pterm1), 0)
    self.assertEqual(yices.term_is_arithmetic(false_), 0)
    self.assertEqual(yices.term_is_arithmetic(pterm1), 1)
    self.assertEqual(yices.term_is_bitvector(false_), 0)
    self.assertEqual(yices.term_is_bitvector(bvbin1), 1)
    self.assertEqual(yices.term_is_tuple(false_), 0)
    self.assertEqual(yices.term_is_tuple(tup1), 1)
    self.assertEqual(yices.term_is_function(false_), 0)
    self.assertEqual(yices.term_is_function(fun1), 1)
    self.assertEqual(yices.term_is_scalar(false_), 0)
    self.assertEqual(yices.term_is_scalar(fun1), 0)
    self.assertEqual(yices.term_bitsize(bvbin1), 6L)
    self.assertEqual(yices.term_is_ground(false_), 1)
    self.assertEqual(yices.term_is_ground(var1), 0)
    self.assertEqual(yices.term_is_atomic(false_), 1)
    # Why is or1 atomic?
    self.assertEqual(yices.term_is_atomic(or1), 1)
    self.assertEqual(yices.term_is_composite(false_), 0)
    self.assertEqual(yices.term_is_composite(ite1), 1)
    self.assertEqual(yices.term_is_composite(tup1), 1)
    self.assertEqual(yices.term_is_projection(false_), 0)
    # Select1 simplifies
    self.assertEqual(yices.term_is_projection(select1), 0)
    self.assertEqual(yices.term_is_projection(select2), 1)
    self.assertEqual(yices.term_is_sum(ite1), 0)
    self.assertEqual(yices.term_is_sum(sum1), 1)
    self.assertEqual(yices.term_is_bvsum(select1), 0)
    # bvsum1 simplifies since the terms are all numbers
    self.assertEqual(yices.term_is_bvsum(bvsum1), 0)
    self.assertEqual(yices.term_is_bvsum(bvsum2), 1)
    self.assertEqual(yices.term_is_product(ite1), 0)
    self.assertEqual(yices.term_is_product(product1), 0)
    self.assertEqual(yices.term_is_product(product2), 1)
    self.assertEqual(yices.term_constructor(true_), 0L)
    self.assertEqual(yices.term_constructor(int1), 1L)
    self.assertEqual(yices.term_constructor(bvconst32_1), 2L)
    self.assertEqual(yices.term_num_children(bvconst32_1), 0L)
    self.assertEqual(yices.term_num_children(select2), 1L)
    self.assertEqual(yices.term_num_children(tup1), 4L)
    self.assertEqual(yices.term_child(tup1, 2), iconst1)
    # Don't have a term for proj_arg(select2)
    projarg1 = yices.proj_arg(select2)
    self.assertEqual(yices.proj_index(select2), 2)
    self.assertEqual(yices.proj_arg(select2), tupconst1)
    val_p = pointer(c_int32(0))
    self.assertEqual(yices.bool_const_value(true_, val_p), 0)
    # Should this be true_ ?
    self.assertEqual(val_p[0], 1)
    bval = (c_int32 * 8)(0, 0, 0, 0, 0, 0, 0, 0)
    self.assertEqual(yices.bv_const_value(bvconst32_1, bval), 0)
    self.assertEqual(bval[0:7], [0, 1, 0, 1, 0, 1, 0])
    scalar_t = yices.new_scalar_type(20)
    scalar_c = yices.constant(scalar_t, 13)
    self.assertEqual(yices.scalar_const_value(scalar_c, val_p), 0)
    self.assertEqual(val_p[0], 13)
    self.assertEqual(yices.rational_const_value(rat32_1, gmpq), 0)
    pterm = yices.term_t()
    self.assertEqual(yices.sum_component(sum1, 2, gmpq, pterm), 0)
    val = c_int32()
    self.assertEqual(yices.type_of_term(bvsum2), 13)
    self.assertEqual(yices.bvsum_component(bvsum2, 1, val, pterm), 0)
    self.assertEqual(yices.term_is_bitvector(pterm), 1)
    self.assertEqual(yices.term_is_bitvector(bvvar2), 1)
    self.assertEqual(val.value, 1)
    # Why is pterm.value needed here?
    self.assertEqual(pterm.value, bvvar2)
    exp1 = c_int32()
    self.assertEqual(yices.product_component(product2, 1, pterm, exp1), 0)
    self.assertEqual(exp1.value, 1)
    # Why is pterm.value needed here?
    self.assertEqual(pterm.value, ivar2)
    # Note that the next two can change easily
    self.assertEqual(yices.num_terms(), 103L)
    self.assertEqual(yices.num_types(), 26L)
    self.assertEqual(yices.incref_term(pterm), 0)
    self.assertEqual(yices.num_posref_terms(), 1)
    self.assertEqual(yices.decref_term(pterm), 0)
    self.assertEqual(yices.num_posref_terms(), 0)
    self.assertEqual(yices.incref_type(unint_t), 0)
    self.assertEqual(yices.num_posref_types(), 1)
    self.assertEqual(yices.decref_type(unint_t), 0)
    self.assertEqual(yices.num_posref_types(), 0)
    self.assertEqual(yices.incref_term(int1), 0)
    self.assertEqual(yices.incref_type(int_t), 0)
    yices.garbage_collect(int4, 1, ta4, 1, 0)
    self.assertEqual(yices.num_terms(), 5L)
    self.assertEqual(yices.num_types(), 3L)
    
